"""
Django settings for kallisti project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

from huey import SqliteHuey
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('KALLISTI_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('KALLISTI_DEBUG', True)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'kallisti',
    'kallisticore.apps.KallistiCoreConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'drf_yasg',
    'huey.contrib.djhuey',
    'corsheaders'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # 'NAME': '/tmp/db.sqlite3'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

SECURE_SSL_REDIRECT = False


###########################
# Kallisti Custom Setting #
###########################

HUEY = SqliteHuey('kallisti_queues', filename=DATABASES['default']['NAME'])

import django  # noqa: E402
django.setup()

# Config for JWT Verification
# Audience for Open ID should be a client ID.
KALLISTI_AUTH_JWKS_URI = os.getenv('KALLISTI_AUTH_JWKS_URI', '')
KALLISTI_AUTH_JWT_AUDIENCE = os.getenv('KALLISTI_AUTH_JWT_AUDIENCE', '')

# Config for JWT Retrieval on Swagger UI
KALLISTI_AUTH_TYPE = os.getenv('KALLISTI_AUTH_TYPE', 'oauth2')
KALLISTI_AUTH_FLOW = os.getenv('KALLISTI_AUTH_FLOW', 'password')
KALLISTI_AUTH_JWT_TOKEN_URL = os.getenv('KALLISTI_AUTH_JWT_TOKEN_URL', '')
KALLISTI_AUTH_URL = os.getenv('KALLISTI_AUTH_URL', '')
KALLISTI_AUTH_TOKEN_NAME = os.getenv('KALLISTI_AUTH_TOKEN_NAME', '')
KALLISTI_AUTH_CLIENT_ID = os.getenv('KALLISTI_AUTH_CLIENT_ID', '')
KALLISTI_AUTH_CLIENT_SECRET = os.getenv('KALLISTI_AUTH_CLIENT_SECRET', '')
KALLISTI_AUTH_CLIENT_APP_NAME = os.getenv('KALLISTI_AUTH_CLIENT_APP_NAME',
                                          'Kallisti')

# Custom authentication can be configured
from kallisticore.authentication import DefaultAuthentication  # noqa: E402
KALLISTI_API_AUTH_CLASS = DefaultAuthentication

# Custom permission class can be configured
from kallisticore.permissions import DefaultUserPermission  # noqa: E402
KALLISTI_API_PERMISSION_CLASS = DefaultUserPermission

# module map
KALLISTI_MODULE_MAP = {
    'cf': 'kallisticore.modules.cloud_foundry',
    'cm': 'kallisticore.modules.common',
    'k8s': 'kallisticore.modules.kubernetes',
    'istio': 'kallisticore.modules.kubernetes',
    'prom': 'kallisticore.modules.prometheus',
    'aws': 'kallisticore.modules.aws'
}

# credential class map
KALLISTI_CREDENTIAL_CLASS_MAP = {
    'ENV_VAR_USERNAME_PASSWORD': 'kallisticore.lib.credential.'
                                 'EnvironmentUserNamePasswordCredential',
    'TOKEN_FILE': 'kallisticore.lib.credential.TokenFileCredential',
    'K8S_SVC_ACC_TOKEN_FILE': 'kallisticore.lib.credential.'
                              'KubernetesServiceAccountTokenCredential'
}

# Custom trial observer classes to be executed at trial completion
# They need to implement kallisticore.lib.observe.observer.Observer
TRIAL_OBSERVERS = []

# Custom trial creation hook functions to be executed at trial creation
TRIAL_TASK_CREATION_HOOKS = [
    # add_token_to_task etc...
]

# Platform data to be returned from GET /info
KALLISTI_INFO_API_PLATFORM = {
    'TOKEN_URL': KALLISTI_AUTH_JWT_TOKEN_URL,
    'AUTHORIZE_URL': KALLISTI_AUTH_URL
}

# Settings for Swagger UI
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    'SECURITY_DEFINITIONS': {
        'Auth API': {
            'type': 'oauth2',
            'authorizationUrl': KALLISTI_AUTH_URL,
            'tokenUrl': KALLISTI_AUTH_JWT_TOKEN_URL,
            'flow': 'password',
            'x-tokenName': KALLISTI_AUTH_TOKEN_NAME
        }
    },
    'OAUTH2_CONFIG': {
        'clientId': KALLISTI_AUTH_CLIENT_ID,
        'clientSecret': KALLISTI_AUTH_CLIENT_SECRET,
        'appName': KALLISTI_AUTH_CLIENT_APP_NAME,
    }
}
# Report Header
KALLISTI_REPORT_HEADER_TITLE = "Kallisti Report"
